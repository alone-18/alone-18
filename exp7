
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
typedef struct Node {
    int data;           
    struct Node* left;      
    struct Node* right;     
} Node;
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
        newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
Node* insertNode(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
        if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else {
        root->right = insertNode(root->right, data);
    }
    return root;
}
bool searchNode(Node* root, int data) {
    if (root == NULL) {
        return false;
    }
        if (root->data == data) {
        return true;
    }
        if (data < root->data) {
        return searchNode(root->left, data);
    } else {
        return searchNode(root->right, data);
    }
}
void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}
int main() {
    Node* root = NULL;  
    root = insertNode(root, 50);
    root = insertNode(root, 30);
    root = insertNode(root, 70);
    root = insertNode(root, 20);
    root = insertNode(root, 40);
    root = insertNode(root, 60);
    root = insertNode(root, 80);
    int valueToSearch = 40;
    if (searchNode(root, valueToSearch)) {
        printf("Value %d found in the binary tree.\n", valueToSearch);
    } else {
        printf("Value %d not found in the binary tree.\n", valueToSearch);
    }
    freeTree(root);
    return 0;
}
